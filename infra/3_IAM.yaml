Parameters:
  SecretsManagerARN:
    Type: String
    Description: Into Secret Manager ARN. You have this one at us-east-1.

Resources:
  # For Assume Role
  S3AccessRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt LambdaRole.Arn
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: s3accessroleforpython
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:DeleteObject'
                Resource:
                  - !Join
                      - ""
                      - - !ImportValue S3BucketARN
                        - "/*"

  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
    
  alloowassumerole:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: alloowassumerole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Resource:
              - !GetAtt S3AccessRole.Arn
              #- !GetAtt LambdaExecutionRole.Arn
      Roles:
        - !Ref LambdaRole
        - !Ref CredentialLambdaRole

  allowaccesssecretsmanager:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: allowaccesssecretsmanager
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'secretsmanager:GetSecretValue'
            Resource:
              - !Ref SecretsManagerARN
      Roles:
        - !Ref LambdaRole
        - !Ref CredentialLambdaRole

  # Download Lambdaからdynamo Lambdaへのアクセスを許可
  AccessAllowDonwloadToDynamo:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AccessAllowDonwloadToDynamo
      Roles: 
        - !Ref S3AccessRole
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "lambda:InvokeFunction"
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:MyAttendanceFunction"

  ApiGatewayToCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  # すまんがここでLambdaのARN経由からのみアクセスを許可するためのIAM Roleを作成
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-dynamodb-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt LambdaRole.Arn
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                Resource: !ImportValue AttendancetblArn

# 全てのlambdaからCheckCredentialFunctionへのアクセスを許可
  AccessAllowCheckCredentialFunction:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AccessAllowCheckCredentialFunction
      Roles: 
        - !Ref LambdaRole
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "lambda:InvokeFunction"
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CheckCredentialFunction"


  # Lambda以外はaccess拒否
  AccessDenyexceptLambda:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AccessDenyexceptLambdaPolicy
      Roles: 
        - !Ref LambdaExecutionRole
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Deny"
            Action: "dynamodb:*"
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AttendanceRecords"
            Condition:
              StringNotEquals:
                aws:PrincipalArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/lambda-dynamodb-role"

  # Credential FunctionからDynamoDBへのアクセスポリシー
  CredentialToDynamoAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CredentialToDynamoAccessPolicy
      Roles: 
        - !Ref CredentialLambdaRole
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: 
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:Query
            Resource: !ImportValue CredentialtblArn

  # Credential Role
  CredentialLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
    

Outputs:
  S3AccessRole:
    Value: !GetAtt S3AccessRole.Arn
    Description: For S3 Access Assume IAM ROLE
    Export:
      Name: S3AccessRole
  LambdaRole:
    Value: !GetAtt LambdaRole.Arn
    Description: For Lambda IAM ROLE
    Export:
      Name: LambdaRole
  ApiGatewayToCloudWatchRole:
    Value: !GetAtt ApiGatewayToCloudWatchRole.Arn
    Description: for api gateway IAM ROLE
    Export:
      Name: ApiGatewayToCloudWatchRole
  CredentialLambdaRole:
    Value: !GetAtt CredentialLambdaRole.Arn
    Description: For Credential Lambda IAM ROLE
    Export:
      Name: CredentialLambdaRole


